name: Make TestFlight Alpha Build

on:
  pull_request:
    branches:
    - develop
    - graeme/ios-nightly-builds
    #- '!develop' # filter out PRs matching that pattern
    types: [closed]

  push:
    branches: [ develop, graeme/ios-nightly-builds ]

jobs:
  make-release:
    if: github.event.action == 0 || github.event.pull_request.merged == true # empty string returns 0; for case when workflow is triggered manually
    runs-on: macos-13
    name: Make TestFlight Alpha Build

    steps:

    # - name: Set destination output
    #   id: destination
    #   run: |
    #     INPUT_DESTINATION=${{ github.event.inputs.destination }}
    #     echo "destination=${INPUT_DESTINATION:-"appstore"}" >> $GITHUB_OUTPUT

    # - name: Assert develop branch
    #   run: |
    #     case "${{ github.ref }}" in
    #       *develop/*) ;;
    #       graeme/ios-nightly-builds) ;;
    #       *) echo "ðŸ‘Ž Not develop branch"; exit 1 ;;
    #     esac

    - name: Register SSH keys for access to certificates
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check out the code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set cache key hash
      run: |
         has_only_tags=$(jq '[ .object.pins[].state | has("version") ] | all' DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
         if [[ "$has_only_tags" == "true" ]]; then
           echo "cache_key_hash=${{ hashFiles('DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
         else
           echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
         fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v3
      with:
        path: DerivedData/SourcePackages
        key: ${{ runner.os }}-spm-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_$(<.xcode-version).app/Contents/Developer

    - name: Prepare fastlane
      run: bundle install

    - name: Archive and upload the app
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      run: |
        app_version="$(cut -d ' ' -f 3 < Configuration/Version.xcconfig)"
        bundle exec fastlane release_alpha
        build_version="cat DuckDuckGo.xcodeproj/project.pbxproj | grep -m1 'CURRENT_PROJECT_VERSION' | cut -d'=' -f2 | tr -d ';' | tr -d ' '"
        echo "dsyms_path=${{ github.workspace }}/DuckDuckGo.app.dSYM.zip" >> $GITHUB_ENV
        echo "app_version=${app_version}" >> $GITHUB_ENV
        echo "build_version=${build_version}" >> $GITHUB_ENV

    # - name: Upload dSYMs artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: DuckDuckGo-alpha-dSYM-${{ env.app_version }}
    #     path: ${{ env.dsyms_path }}

    # - name: Upload debug symbols to Asana
    #   if: github.event.inputs.asana-task-url
    #   env:
    #     ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
    #   run: |
    #     asana_dsyms_path="${{ github.workspace }}/DuckDuckGo-${{ env.app_version }}(${{ env.app_version }})-dSYM.zip"
    #     mv -f "${{ env.dsyms_path }}" "$asana_dsyms_path"

    #     curl -s "https://app.asana.com/api/1.0/tasks/${{ steps.get-task-id.outputs.task_id }}/attachments" \
    #       -H "Authorization: Bearer ${{ secrets.ASANA_ACCESS_TOKEN }}" \
    #       --form "file=@${asana_dsyms_path};type=application/zip"

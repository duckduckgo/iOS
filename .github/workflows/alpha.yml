name: Make TestFlight Alpha Build

on:
  workflow_dispatch:
    inputs:
      destination:
        description: "TestFlight Group"
        required: true
        default: "Latest Alpha Group"
        type: string
  workflow_call:
    inputs:
      destination:
        description: "TestFlight Group"
        required: true
        default: "Latest Alpha Group"
        type: string
    secrets:
      SSH_PRIVATE_KEY_FASTLANE_MATCH:
        required: true
      APPLE_API_KEY_BASE64:
        required: true
      APPLE_API_KEY_ID:
        required: true
      APPLE_API_KEY_ISSUER:
        required: true
      MATCH_PASSWORD:
        required: true
      ASANA_ACCESS_TOKEN:
        required: true

jobs:
  make-alpha:
    runs-on: macos-13
    name: Make TestFlight Alpha Build

    env:
      destination: ${{ github.event.inputs.destination || inputs.destination }}

    steps:

    - name: Assert develop branch
      run: |
        case "${{ github.ref }}" in
          *develop) ;;
          *) echo "ðŸ‘Ž Not develop branch"; exit 1 ;;
        esac

    - name: Register SSH keys for access to certificates
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check out the code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set cache key hash
      run: |
         has_only_tags=$(jq '[ .object.pins[].state | has("version") ] | all' DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
         if [[ "$has_only_tags" == "true" ]]; then
           echo "cache_key_hash=${{ hashFiles('DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
         else
           echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
         fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v3
      with:
        path: DerivedData/SourcePackages
        key: ${{ runner.os }}-spm-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-spm-

      # Using Xcode 15 as the alpha build uses iOS 17 APIs
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode_15.0.1.app/Contents/Developer

    - name: Prepare fastlane
      run: bundle install

    - name: Archive and upload the app
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      run: |
        app_version="$(cut -d ' ' -f 3 < Configuration/Version.xcconfig)"
        bundle exec fastlane increment_build_number_for_version version:$app_version app_identifier:"com.duckduckgo.mobile.ios.alpha"
        bundle exec fastlane release_alpha groups:["${{ env.destination }}"]
        build_version="$(xcodebuild -configuration Alpha -showBuildSettings | grep CURRENT_PROJECT_VERSION | tr -d 'CURRENT_PROJECT_VERSION =')"
        echo "dsyms_path=${{ github.workspace }}/DuckDuckGo-Alpha.app.dSYM.zip" >> $GITHUB_ENV
        echo "app_version=${app_version}" >> $GITHUB_ENV
        echo "build_version=${build_version}" >> $GITHUB_ENV

    - name: Upload dSYMs artifact
      uses: actions/upload-artifact@v3
      with:
        name: DuckDuckGo-Alpha-dSYM-${{ env.app_version }}
        path: ${{ env.dsyms_path }}

    - name: Upload debug symbols to Asana
      env:
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        asana_dsyms_path="${{ github.workspace }}/DuckDuckGo-Alpha-${{ env.app_version }}(${{ env.build_version }})-dSYM.zip"
        mv -f "${{ env.dsyms_path }}" "$asana_dsyms_path"

        curl -s "https://app.asana.com/api/1.0/tasks/1205344386326139/attachments" \
          -H "Authorization: Bearer ${{ secrets.ASANA_ACCESS_TOKEN }}" \
          --form "file=@${asana_dsyms_path};type=application/zip"

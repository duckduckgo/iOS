name: Sync-End-to-End tests	

on:	
  workflow_dispatch:	
  # push:	
  schedule:	
    - cron: '0 5 * * *' # run at 5 AM UTC	

jobs:	
  sync-end-to-end-tests:	
    name: Sync End to end Tests	
    runs-on: macos-13-xlarge	

    steps:	
    - name: Check out the code	
      uses: actions/checkout@v3	
      with:	
        submodules: recursive	

    - name: Set cache key hash	
      run: |	
        has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)	
        if [[ "$has_only_tags" == "true" ]]; then	
          echo "cache_key_hash=${{ hashFiles('DuckDuckGo.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV	
        else	
          echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."	
        fi	
    - name: Cache SPM	
      if: env.cache_key_hash	
      uses: actions/cache@v3	
      with:	
        path: DerivedData/SourcePackages	
        key: ${{ runner.os }}-spm-${{ env.cache_key_hash }}	
        restore-keys: |	
          ${{ runner.os }}-spm-	
    - name: Select Xcode	
      run: sudo xcode-select -s /Applications/Xcode_$(<.xcode-version).app/Contents/Developer	

    - name: Install xcbeautify	
      continue-on-error: true	
      run: |	
        if ! command -v xcbeautify &> /dev/null; then	
          brew install xcbeautify	
        fi	
    - name: Create test account for Sync and return the recovery code	
      uses: duckduckgo/sync_crypto/action@main	
      id: sync-recovery-code	
      with:	
        debug: true	

    - name: Build and run Sync e2e tests	
      env:	
        CODE: ${{ steps.sync-recovery-code.outputs.recovery-code }}	
      run: |	
        set -o pipefail && xcodebuild test \	
          -scheme "Sync End-to-End UI Tests" \	
          -configuration "CI" \	
          -derivedDataPath "DerivedData" \	
        | tee xcodebuild.log \	
        | xcbeautify	
    	
    # - name: Create Asana task when workflow failed	
    #   if: ${{ failure() }}	
    #   run: |	
    #     curl -s "https://app.asana.com/api/1.0/tasks" \	
    #       --header "Accept: application/json" \	
    #       --header "Authorization: Bearer ${{ secrets.ASANA_ACCESS_TOKEN }}" \	
    #       --header "Content-Type: application/json" \	
    #       --data ' { "data": { "name": "GH Workflow Failure - Sync End to end tests", "projects": [ "${{ vars.MACOS_APP_DEVELOPMENT_ASANA_PROJECT_ID }}" ], "notes" : "The end to end workflow has failed. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" } }'	

    - name: Upload logs when workflow failed	
      uses: actions/upload-artifact@v3	
      if: failure()	
      with:	
        name: BuildLogs	
        path: |	
          xcodebuild.log	
          DerivedData/Logs/Test/*.xcresult	
        retention-days: 7